import{_ as s,S as n,N as a,Q as l}from"./chunks/framework.f9c570e8.js";const p="/simpleadmin-doc/startapi/webfirst.png",o="/simpleadmin-doc/startapi/yulan.png",e="/simpleadmin-doc/startapi/shengchengbiao.png",t="/simpleadmin-doc/startapi/zhongzi.png",r="/simpleadmin-doc/startapi/navicat.png",c="/simpleadmin-doc/startapi/navicatriqi.png",D=JSON.parse('{"title":"CodeFirst","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/start_api/codefirst.md","filePath":"guide/api/start_api/codefirst.md","lastUpdated":null}'),E={name:"guide/api/start_api/codefirst.md"},i=l('<h1 id="codefirst" tabindex="-1">CodeFirst <a class="header-anchor" href="#codefirst" aria-label="Permalink to &quot;CodeFirst&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>传统开发中，通常采用DbFirst的方式开发，先有数据库和表，再将对应的表转为实体。随着技术的发展，开始有了CodeFist的方式开发，先创建实体类，再通过实体类反向的创建数据库和表结构，微软的EF框架就是典型，本系统使用的ORM是SqlSugar，同样也支持CodeFisrt，详情可以查看文档<a href="https://www.donet5.com/Doc/1/1206" target="_blank" rel="noreferrer">SqlSugar文档</a>。</p><h2 id="webfirst" tabindex="-1">WebFirst <a class="header-anchor" href="#webfirst" aria-label="Permalink to &quot;WebFirst&quot;">​</a></h2><p>WebFirst 是果糖大数据团队开发的新一代 高性能 代码生成器&amp;数据库设计工具，由.net core 3.1 + sqlsugar 开发 导入1000个表只要1-2秒，用法简单，功能强大，支持多种数据库 ，具体功能如下：</p><ul><li>建库、CodeFirst方式在线建表，没用到CodeFirst的用户可以用工具轻松体验，支持公共字段</li><li>导出EXCEL文档，把每个表的数据导出来</li><li>模版管理 可以自个添加修改模版，使用的是Razor模版引擎对C#程序员更加友好</li><li>方案管理，可以创建自已的生成方案，修改方案</li><li>支持扩展模版属性，支持生成更加丰富的前端代码</li><li>支持生成解决方案</li><li>支持生成附加文件，支持文件后缀</li><li>支持视图</li><li>支持自定义数据类型</li><li>支持多种数据库 MYSQL PGSQL SQLITE SQLSERVE ORCLE 达梦</li></ul><p><img src="'+p+`" alt="WebFirst" data-fancybox="gallery"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>WebFist参考文档 <a href="https://www.donet5.com/Doc/11" target="_blank" rel="noreferrer">https://www.donet5.com/Doc/11</a></li></ul></div><h2 id="生成实体类" tabindex="-1">生成实体类 <a class="header-anchor" href="#生成实体类" aria-label="Permalink to &quot;生成实体类&quot;">​</a></h2><p>采用webfirst生成实体类，具体用法不阐述，参考webfirst文档，在<code>自定义模板</code>-&gt;<code>模板管理</code>菜单里新建一个模板，下面是我的模板，可以根据情况修改</p><div class="language-csharp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@Model</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">name_space</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">    /// &lt;</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">    /// @((Model.Description+&quot;&quot;).Replace(&quot;\\r&quot;,&quot;&quot;).Replace(&quot;\\n&quot;,&quot;&quot;))</span></span>
<span class="line"><span style="color:#6A737D;">    ///&lt;/</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#B392F0;">SugarTable</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@(Model.TableName)&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#B392F0;">TableDescription</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;@((Model.Description+&quot;&quot;).Replace(&quot;</span><span style="color:#E1E4E8;">\\r</span><span style="color:#9ECBFF;">&quot;,&quot;&quot;).Replace(&quot;</span><span style="color:#E1E4E8;">\\n</span><span style="color:#9ECBFF;">&quot;,&quot;&quot;))&quot;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#B392F0;">Tenant</span><span style="color:#E1E4E8;">(SqlsugarConst.DB_Default)]</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#B392F0;">CodeGen</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> class @(Model.ClassName): DataEntityBase</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">@foreach</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">item</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Model</span><span style="color:#E1E4E8;">.PropertyGens)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isPrimaryKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.IsPrimaryKey </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,IsPrimaryKey = true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isIdentity</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item.IsIdentity </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;,IsIdentity = true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNull</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(item.IsNullable</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">item.Type</span><span style="color:#F97583;">!=</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">item.IsSpecialType</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">false</span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;">item.Type</span><span style="color:#F97583;">!=</span><span style="color:#9ECBFF;">&quot;byte[]&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&quot;?&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isIgnore</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(item.IsIgnore</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&quot;,IsIgnore = true&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isJson</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(item.CodeType.</span><span style="color:#B392F0;">StartsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;json&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&quot;,IsJson= true&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Length</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item.Length</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">$&quot;,Length= {</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">Length</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isnullable</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item.IsNullable</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">;    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DecimalDigits</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item.DecimalDigits</span><span style="color:#F97583;">==</span><span style="color:#79B8FF;">null</span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;">$&quot;,DecimalDigits= {</span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">DecimalDigits</span><span style="color:#9ECBFF;">}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">    //var name = item.DbColumnName.ToLower();</span></span>
<span class="line"><span style="color:#6A737D;">    //var list = name .Split(&quot;_&quot;);</span></span>
<span class="line"><span style="color:#6A737D;">   //for (int i = 0; i &lt; list.Length; i++)</span></span>
<span class="line"><span style="color:#6A737D;">   // {</span></span>
<span class="line"><span style="color:#6A737D;">    //var str = list[i];</span></span>
<span class="line"><span style="color:#6A737D;">   // var c = str.Substring(0, 1).ToUpper() + str.Substring(1);</span></span>
<span class="line"><span style="color:#6A737D;">   // list[i] = c;</span></span>
<span class="line"><span style="color:#6A737D;">  //  }</span></span>
<span class="line"><span style="color:#6A737D;">    //var column = string.Join(&quot;&quot;, list);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">column</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">item.DbColumnName;</span></span>
<span class="line"><span style="color:#6A737D;">    //var column = name.Substring(0, 1).ToUpper() + name.Substring(1);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newPropertyName</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">column; </span><span style="color:#6A737D;">//这里可以用C#处理 实体属性的显式格式</span></span>
<span class="line"><span style="color:#6A737D;">    //想和数据库一样就用 newPropertyName=item.DbColumnName</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(System.Text.RegularExpressions.Regex.</span><span style="color:#B392F0;">IsMatch</span><span style="color:#E1E4E8;">(newPropertyName.</span><span style="color:#B392F0;">Substring</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&quot;[0-9]&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        newPropertyName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">newPropertyName;</span><span style="color:#6A737D;">//处理属性名开头为数字情况</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(newPropertyName</span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;">Model.ClassName)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        newPropertyName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;_&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">newPropertyName;</span><span style="color:#6A737D;">//处理属性名不能等于类名</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">desc</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">(item.Description</span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">Replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\r</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">Replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//处理换行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(isIgnore</span><span style="color:#F97583;">!=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">       isPrimaryKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">isIdentity </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">isNull</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">/// &lt;</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">/// @(desc) </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">@if</span><span style="color:#E1E4E8;">(item.DefaultValue</span><span style="color:#F97583;">!=</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">/// 默认值: @Raw(item.DefaultValue)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">:</span><span style="color:#6A737D;">///&lt;/</span><span style="color:#85E89D;">summary</span><span style="color:#6A737D;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">SugarColumn</span><span style="color:#E1E4E8;">(ColumnName</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;@(column)&quot;</span><span style="color:#E1E4E8;">,ColumnDescription </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;@(desc)&quot;</span><span style="color:#E1E4E8;"> @(</span><span style="color:#B392F0;">isPrimaryKey</span><span style="color:#E1E4E8;">) @(</span><span style="color:#B392F0;">isIdentity</span><span style="color:#E1E4E8;">) @(</span><span style="color:#B392F0;">isIgnore</span><span style="color:#E1E4E8;">) @(</span><span style="color:#B392F0;">isJson</span><span style="color:#E1E4E8;">) @(</span><span style="color:#B392F0;">Length</span><span style="color:#E1E4E8;">) @(DecimalDigits),IsNullable </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">@(isnullable))]</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@Raw</span><span style="color:#E1E4E8;">(item.Type)@isNull @newPropertyName{ get; set; }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>在类建表模式中选择要生成的表，点击预览并选择模板，可以生成对应的实体类代码。SqlSugar插件中的Entity文件夹新建对应的实体类，将预览的代码复制进去,根据情况选择实体继承的类，去掉公共字段即可。 <img src="`+o+`" alt="yulan" data-fancybox="gallery"></p><h2 id="生成数据库表" tabindex="-1">生成数据库表 <a class="header-anchor" href="#生成数据库表" aria-label="Permalink to &quot;生成数据库表&quot;">​</a></h2><p>只需要在业务层的配置文件中设置IsInitDb为true。在启动项目时，系统会自动创建数据库表结构和种子数据。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//系统层设置</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">&quot;ApplicationSettings&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;InitTable&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//是否初始化表结构</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#79B8FF;">&quot;InitSeedData&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//是否初始化种子数据</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>系统启动时，会自动创建对应的数据库和表 <img src="`+e+'" alt="shengchengbiao" data-fancybox="gallery"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>如果希望某个已经存在的表不重新初始化，只需要在实体类上加上IgnoreInitTable特性即可，系统会在初始化的时候忽略该实体。</p></div><h2 id="生成种子数据" tabindex="-1">生成种子数据 <a class="header-anchor" href="#生成种子数据" aria-label="Permalink to &quot;生成种子数据&quot;">​</a></h2><p>本系统的种子数据放在对应业务层下的SeedData文件夹。Json文件夹放置了对应的种子数据，默认以seed_开头。 <img src="'+t+'" alt="zhongzi" data-fancybox="gallery"></p><p>json文件夹下放置的就是种子数据的json文件，可以通过Navicat导出的json文件。 <img src="'+r+'" alt="navicat" data-fancybox="gallery"></p><p>要注意时间格式要改成<code>YMD</code><img src="'+c+'" alt="navicatriqi" data-fancybox="gallery"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><ul><li>系统启动时会自动读取种子数据类，并将数据插入到数据库中。</li><li>具体实现可以在SqlSugar层的<code>CodeFirstUtils</code>类中查看。</li><li>如果希望有些表不生成种子数据，只需要在SeedDatal类加上<code>IgnoreSeedDataAdd</code>或者<code>IgnoreSeedDataAddUpdate</code>特性即可。</li></ul></div>',22),y=[i];function u(F,b,m,d,q,B){return n(),a("div",null,y)}const C=s(E,[["render",u]]);export{D as __pageData,C as default};
